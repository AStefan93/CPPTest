# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: ["**"]
  pull_request:
    branches: [master, development]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  buildUbuntuContainer:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Build docker images
        run: docker build -t local -f .devcontainer/Dockerfile .
      - name: Upload image
        uses: ishworkh/docker-image-artifact-upload@v1
        with:
          image: "local:latest"

  buildGCC:
    needs: buildUbuntuContainer
    strategy:
      matrix:
        config: [debug, release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download image
        uses: ishworkh/docker-image-artifact-download@v1
        with:
          image: "local:latest"
      - name: Run container
        run: docker run --name localContainer -idt --volume $PWD:/srv local
      - name: Build
        run: docker exec -w/srv localContainer sudo bazel build --config ${{ matrix.config }} ...
      - name: Generate compile commands
        run: docker exec -w/srv localContainer sudo bazel run @hedron_compile_commands//:refresh_all -- --config=${{ matrix.config }}
      - name: Build docker images
        run: docker commit localContainer gcclocal${{ matrix.config }}
      - name: Stop container
        run: docker stop localContainer
      - name: Upload image
        uses: ishworkh/docker-image-artifact-upload@v1
        with:
          image: "gcclocal${{ matrix.config }}:latest"

  runTests:
    needs: buildGCC
    strategy:
      matrix:
        config: [debug, release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download image
        uses: ishworkh/docker-image-artifact-download@v1
        with:
          image: "gcclocal${{ matrix.config }}:latest"
      - name: Run tests
        run: docker run -v $PWD:/srv -w/srv gcclocal${{ matrix.config }} sudo bazel test --config ${{ matrix.config }} --test_output=all ...
      - name: cppcheck
        run: docker exec -w/srv gcclocal${{ matrix.config }} sudo cppcheck src --enable=all --inconclusive --library=posix --project=compile_commands.json -iexternal -ibazel-out --suppress-xml=src/cppcheck_suppressions.xml
      - name: clang-tidy check
        run: docker exec -w/srv gcclocal${{ matrix.config }} sudo clang-tidy src/applications/transitiveIncludes/foo.cpp
