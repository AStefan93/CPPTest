Checks: "-*,
    clang-analyzer-*,
    modernize-avoid-bind,
    modernize-avoid-c-arrays,
    modernize-concat-nested-namespaces,
    modernize-deprecated-headers,
    modernize-deprecated-ios-base-aliases,
    modernize-loop-convert,
    modernize-make-shared,
    modernize-make-unique,
    modernize-pass-by-value,
    modernize-raw-string-literal,
    modernize-redundant-void-arg,
    modernize-replace-auto-ptr,
    modernize-replace-disallow-copy-and-assign-macro,
    modernize-replace-random-shuffle,
    modernize-return-braced-init-list,
    modernize-shrink-to-fit,
    modernize-unary-static-assert,
    modernize-use-auto,
    modernize-use-bool-literals,
    modernize-use-default-member-init,
    modernize-use-emplace,
    modernize-use-equals-default,
    modernize-use-equals-delete,
    modernize-use-nodiscard,
    modernize-use-noexcept,
    modernize-use-nullptr,
    modernize-use-override,
    modernize-use-transparent-functors,
    modernize-use-uncaught-exceptions,
    modernize-use-using,
    performance-*,
    readability*,
    cppcoreguidelines-*,
    llvm-*,
    google-*,
    bugprone-*"
AnalyzeTemporaryDtors: false
HeaderFilterRegex: "*"
FormatStyle: file
CheckOptions:
    [
        { key: readability-identifier-naming.ClassCase, value: CamelCase },
        {
            key: readability-identifier-naming.ClassMemberCase,
            value: lower_case,
        },
        { key: readability-identifier-naming.PrivateMemberPrefix, value: m_ },
        {
            key: readability-identifier-naming.ClassMethodCase,
            value: lower_case,
        },
        { key: readability-identifier-naming.StructCase, value: lower_case },
        { key: readability-identifier-naming.VariableCase, value: lower_case },
        {
            key: readability-identifier-naming.GlobalConstantCase,
            value: UPPER_CASE,
        },
        { key: readability-identifier-naming.FunctionCase, value: lower_case },
    ]
