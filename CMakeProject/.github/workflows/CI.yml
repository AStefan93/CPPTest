# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: ["**"]
  pull_request:
    branches: [master]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  DevContainer:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Build docker images
        run: docker build -t local -f .devcontainer/Dockerfile .
      - name: Upload image
        uses: ishworkh/docker-image-artifact-upload@v1
        with:
          image: "local:latest"

  Clang:
    needs: DevContainer
    strategy:
      matrix:
        compiler: [g++, clang]
        config: [Debug, Release]
    runs-on: ubuntu-latest
    env:
      working-directory: /srv
    steps:
      - uses: actions/checkout@v3
      - name: Download image
        uses: ishworkh/docker-image-artifact-download@v1
        with:
          image: "local:latest"
      - name: Run container
        run: docker run --name localContainer -idt --volume $PWD:${{env.working-directory}} local
      - name: Configure
        run: docker exec -w${{env.working-directory}} localContainer /usr/bin/cmake --no-warn-unused-cli -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=TRUE -DCMAKE_BUILD_TYPE:STRING=${{ matrix.config }} -DCMAKE_CXX_COMPILER:FILEPATH=/usr/bin/${{ matrix.compiler }} -S${{env.working-directory}} -B${{env.working-directory}}/build -G Ninja
      - name: Build
        run: docker exec -w${{env.working-directory}} localContainer /usr/bin/cmake --build ${{env.working-directory}}/build --config ${{ matrix.config }} --target all --
      # - name: IWYU
      #   run: docker exec -w${{env.working-directory}} localContainer sudo bazel build --config=iwyu ...
      # - name: cppcheck
      #   run: docker exec -w${{env.working-directory}} localContainer sudo cppcheck src --enable=all --inconclusive --library=posix --project=compile_commands.json -iexternal -ibazel-out --suppress-xml=src/cppcheck_suppressions.xml
      # - name: clang-tidy check
      #   run: docker exec -w${{env.working-directory}} localContainer sudo clang-tidy src/applications/addressbook/addressbook.cpp
